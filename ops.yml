version: "1"
commands:
# setup aws ecs fargate infrastructure
  - name: setup:0.2.0
    run: ./node_modules/.bin/ts-node /ops/src/setup.ts
    description: "setup an environment"
    # environment variables 
    env:
    # add static env vars
      static:
        - STACK_TYPE=aws-ecs-fargate
        - AWS_REGION=us-west-1
      # add and store aws secrets
      secrets:
        - AWS_ACCESS_KEY_ID
        - AWS_SECRET_ACCESS_KEY
        - AWS_ACCOUNT_NUMBER
      # pass environment host and database configurations
      configs:
        - DEV_AWS_ECS_FARGATE_STATE
        - STG_AWS_ECS_FARGATE_STATE
        - PRD_AWS_ECS_FARGATE_STATE
        - DEV_AWS_ECS_FARGATE_CLUSTER_VAULT_ARN
        - STG_AWS_ECS_FARGATE_CLUSTER_VAULT_ARN
        - PRD_AWS_ECS_FARGATE_CLUSTER_VAULT_ARN
        - DEV_AWS_ECS_FARGATE_SERVICE_VAULT_ARN
        - STG_AWS_ECS_FARGATE_SERVICE_VAULT_ARN
        - PRD_AWS_ECS_FARGATE_SERVICE_VAULT_ARN
  # deploy environment on aws ecs fargate workflow
  - name: deploy:0.2.0
    run: ./node_modules/.bin/ts-node /ops/src/deploy.ts
    description: "deploy to an environment"
    env:
    # add static env vars
      static:
        - STACK_TYPE=aws-ecs-fargate
        - AWS_REGION=us-west-1
    # add and store aws secrets
      secrets:
        - AWS_ACCESS_KEY_ID
        - AWS_SECRET_ACCESS_KEY
        - AWS_ACCOUNT_NUMBER
    # pass environment host, resource, and database connections
      configs:
        - DEV_AWS_ECS_FARGATE_STATE
        - STG_AWS_ECS_FARGATE_STATE
        - PRD_AWS_ECS_FARGATE_STATE
        - DEV_AWS_ECS_FARGATE_CLUSTER_VAULT_ARN
        - STG_AWS_ECS_FARGATE_CLUSTER_VAULT_ARN
        - PRD_AWS_ECS_FARGATE_CLUSTER_VAULT_ARN
        - DEV_AWS_ECS_FARGATE_SERVICE_VAULT_ARN
        - STG_AWS_ECS_FARGATE_SERVICE_VAULT_ARN
        - PRD_AWS_ECS_FARGATE_SERVICE_VAULT_ARN
    # destroy aws ecs fargate infrastructure 
  - name: destroy:0.1.0
    run: ./node_modules/.bin/ts-node /ops/src/destroy.ts
    description: "destroy an environment"
    env:
    # add static env vars
      static:
        - STACK_TYPE=aws-ecs-fargate
        - AWS_REGION=us-west-1
    # add and store aws secrets
      secrets:
        - AWS_ACCESS_KEY_ID
        - AWS_SECRET_ACCESS_KEY
        - AWS_ACCOUNT_NUMBER
    # connect to bastion private network with ssh
  - name: ssh:0.1.0
    run: ./node_modules/.bin/ts-node /ops/src/ssh.ts
    description: "connect to bastion with ssh"
    env:
    # add static env vars
      static:
        - STACK_TYPE=aws-ecs-fargate
        - AWS_REGION=us-west-1
    # add and store aws secrets
      secrets:
        - AWS_ACCESS_KEY_ID
        - AWS_SECRET_ACCESS_KEY
        - AWS_ACCOUNT_NUMBER
    # connect application port from client to server
  - name: tunnel:0.1.0
    run: ./node_modules/.bin/ts-node /ops/src/tunnel.ts
    description: "connect to bastion with ssh"
    # add static env vars
    env:
      static:
        - STACK_TYPE=aws-ecs-fargate
        - AWS_REGION=us-west-1
    # add and store aws secrets
      secrets:
        - AWS_ACCESS_KEY_ID
        - AWS_SECRET_ACCESS_KEY
        - AWS_ACCOUNT_NUMBER
    # manage and lock secrets vault
  - name: vault:0.1.0
    run: ./node_modules/.bin/ts-node /ops/src/vault.ts
    description: "manage secrets vault"
    env:
    # add static env vars
      static:
        - STACK_TYPE=aws-ecs-fargate
        - AWS_REGION=us-west-1
    # pass and store aws secrets
      secrets:
        - AWS_ACCESS_KEY_ID
        - AWS_SECRET_ACCESS_KEY
        - AWS_ACCOUNT_NUMBER
    help:
      usage: ops run vault <sub-cmd> <--key> <--value>
      arguments: 
        init: 'init the environments vault'
        set: 'set a key in the enviroment vault'
        ls: 'list keys in the environment vault'
        rm: ' remove a specific key in the environment vault'
        destroy: 'destroy the environment vault'


# Build aws ecs fargate ci/cd pipelines
pipelines:
  - name: sample-app-pipeline:0.2.0
    description: build a release for deployment on fargate
    env:
    # pass and store static env vars
      static:
        - DEBIAN_FRONTEND=noninteractive
        - ORG=workflows-sh
        - REPO=sample-react
        - REF=main
        - AWS_REGION=us-west-1
        - STACK_TYPE=aws-ecs-fargate
      # add aws secrets and github token
      secrets:
        - GITHUB_TOKEN
        - AWS_ACCESS_KEY_ID
        - AWS_SECRET_ACCESS_KEY
        - AWS_ACCOUNT_NUMBER
    # configure event triggers
    events:
      - "github:workflows-sh/sample-react:pull_request.merged"
      - "github:workflows-sh/sample-react:create.tag"
    # configure pipeline steps in a container using workflows
    jobs:
      - name: sample-app-build-job
        description: example build step
        packages:
          - git
          - unzip
          - python
        # bind: # useful for running workflows locally with source code
          # - /path/on/host/to/source:/ops/application
        steps:
          # download aws cli bundle
          - curl https://s3.amazonaws.com/aws-cli/awscli-bundle-1.18.200.zip -o awscli-bundle.zip
          # extract aws cli from the compressed archive
          - unzip awscli-bundle.zip && ./awscli-bundle/install -b ~/bin/aws
          # set the env var to the required path
          - export PATH=~/bin:$PATH
          # get aws version
          - aws --version
          # clone github org and repo using github token
          - git clone https://$GITHUB_TOKEN:x-oauth-basic@github.com/$ORG/$REPO
          # change directory to repo and list all files and directories
          - cd $REPO && ls -asl
          # login to aws ecr using path executables 
          - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_NUMBER.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO
          # build docker image from dockerfile located in the specified path
          - docker build -f Dockerfile -t $AWS_ACCOUNT_NUMBER.dkr.ecr.$AWS_REGION.amazonaws.com/sample-app-$STACK_TYPE:$REF .
          # push docker images to container registry
          - docker push $AWS_ACCOUNT_NUMBER.dkr.ecr.$AWS_REGION.amazonaws.com/sample-app-$STACK_TYPE:$REF

# preview changes to your app in a live deployment
services:
  - name: sample-app:0.1.0
    description: preview of sample app
    run: node sample-app/app.js
    # specify port
    port: [ '8080:8080' ]
    # configure domain and dns based on your project name
    domain: ""
    env:
    # add database hosts, port and user
      static:
        - PORT=8080
        - DB_HOST=localhost
        - DB_PORT=3600
        - DB_USER=fake
    # pass slack secrets for chatops
      secrets:
        - SLACK_SIGNING_SECRET
        - SLACK_BOT_TOKEN
    # configure github event triggers on repository and application
    events:
     - "github:kc-dot-io/sample-app:pull_request.merged"
    # configure workflows to run when specific triggers happen
    trigger:
     - build
     - publish
     - start